// Generated by CoffeeScript 2.0.0-beta4
(function() {
  var AudioProcessor;

  AudioProcessor = class AudioProcessor {
    constructor() {
      this.initialize = this.initialize.bind(this);
      this.destroy = this.destroy.bind(this);
      this.fireFreqEvent = this.fireFreqEvent.bind(this);
      this.requestUserMedia = this.requestUserMedia.bind(this);
      this.onVisibilityChange = this.onVisibilityChange.bind(this);
      this.checkVisibilityApi();
      this.initialize();
    }

    initialize() {
      this.audioCtx = new AudioContext();
      this.analyser = this.audioCtx.createAnalyser();
      this.animateId = void 0;
      this.stream = void 0;
      this.micSource = void 0;
      this.analyser.fftSize = 4096;
      this.sendingAudioData = true;
      this.hidden = void 0;
      this.visibilityChange = void 0;
      this.lastTime = 0;
      this.lastRms = 0;
      this.rmsThreshold = 0.006;
      this.dataBuffer = new Float32Array(this.analyser.fftSize);
      document.addEventListener(this.visibilityChange, this.onVisibilityChange);
      return this.onVisibilityChange();
    }

    destroy() {
      this.sendingAudioData = false;
      if (this.animateId != null) {
        return cancelAnimationFrame(this.animateId);
      }
    }

    autoCorrelate(buffer, sampleRate) {
      var bestCorrelation, bestOffset, correlation, freq, i, j, k, maxSamples, minSamples, noticeableRms, offset, ref, ref1, ref2;
      minSamples = 4;
      maxSamples = buffer.length / 2;
      noticeableRms = 0.008;
      bestOffset = -1;
      bestCorrelation = 0;
      freq = -1;
      for (offset = j = ref = maxSamples, ref1 = minSamples; ref <= ref1 ? j <= ref1 : j >= ref1; offset = ref <= ref1 ? ++j : --j) {
        correlation = 0;
        for (i = k = 0, ref2 = maxSamples; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
          correlation += buffer[i] * buffer[i + offset];
        }
        correlation /= maxSamples + offset;
        if (correlation > bestCorrelation) {
          bestCorrelation = correlation;
          bestOffset = offset;
        }
      }
      return freq = sampleRate / bestOffset;
    }

    fireFreqEvent(time) {
      var event, freq, i, j, ref, rms;
      this.analyser.getFloatTimeDomainData(this.dataBuffer);
      rms = 0;
      freq = 0;
      for (i = j = 0, ref = buffer.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        rms += buffer[i] * buffer[i];
      }
      rms = Math.sqrt(rms / buffer.length);
      if (rms > noticeableRms) {
        if (rms > this.lastRms + this.rmsThreshold) {
          freq = this.autoCorrelate(this.dataBuffer, this.audioCtx.sampleRate);
        }
      }
      if (freq >= 32.7 && freq <= 8372) {
        // C1 - C8
        event = new CustomEvent("freqevent", {
          "detail": {
            "freq": freq
          }
        });
        dispatchEvent(event);
      }
      // @lastTime = time
      return requestAnimationFrame(this.fireFreqEvent);
    }

    requestUserMedia() {
      return navigator.mediaDevices.getUserMedia({
        "audio": true
      }).then((stream) => {
        this.stream = stream;
        this.micSource = this.audioCtx.createMediaStreamSource(this.stream);
        this.micSource.connect(this.analyser);
        return this.animateId = requestAnimationFrame(this.fireFreqEvent);
      }).catch((error) => {
        log(error);
        if (this.animateId != null) {
          return cancelAnimationFrame(this.animateId);
        }
      });
    }

    onVisibilityChange() {
      if (document[this.hidden]) {
        this.sendingAudioData = false;
        cancelAnimationFrame(this.animateId);
        this.animateId = void 0;
        if (this.stream != null) {
          this.stream.getAudioTracks().forEach(function(track) {
            if ("stop" in track) {
              return track.stop();
            }
          });
          if ("stop" in this.stream) {
            this.stream.stop();
          }
        }
        return this.stream = void 0;
      } else {
        return this.requestUserMedia();
      }
    }

    checkVisibilityApi() {
      if (document.hidden != null) {
        this.hidden = "hidden";
        this.visibilityChange = "visibilitychange";
      } else if (document.webkitHidden != null) {
        this.hidden = "webkitHidden";
        this.visibilityChange = "webkitvisibilitychange";
      } else if (document.mozHidden != null) {
        this.hidden = "mozHidden";
        this.visibilityChange = "mozvisibilitychange";
      } else if (document.oHidden != null) {
        this.hidden = "oHidden";
        this.visibilityChange = "ovisibilitychange";
      } else if (document.msHidden != null) {
        this.hidden = "msHidden";
        this.visibilityChange = "msvisibilitychange";
      }
      return document.hidden != null;
    }

  };

}).call(this);
